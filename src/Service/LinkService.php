<?php

namespace App\Service;

use Doctrine\ORM\EntityManagerInterface;
use App\Entity\Link;
use App\Entity\Resource;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\DependencyInjection\ContainerInterface;
use \Imagine\Imagick\Imagine;
use \Imagine\Image\Box;
use \Imagine\Image\ImageInterface;

class LinkService{

  private $entityManager;
  private $container;
  private $fileSystem;

  public function __construct(EntityManagerInterface $entityManager, ContainerInterface $container, Filesystem $fileSystem){
    $this->entityManager = $entityManager;
    $this->container = $container;
    $this->fileSystem = $fileSystem;
  }

  public function createLink($params)
  {
    $link = new Link();

    $createdOn = date_create();

    $user_id = $params['created_by']->getId();
    $hash = $this->_generateHash($user_id, date_format($createdOn, 'U'));
    $external_url = $this->container->getParameter('link_url_prefix').$hash;

    $expires = date_create_from_format('Y-m-d', $params['expires_by']);


    $link->setAccess($params['access'])
    ->setTarget($params['target'])
    ->setExpiresBy($expires)
    ->setComment($params['comment'])
    ->setMaxRequests($params['max_requests'])
    ->setCreatedBy($params['created_by'])
    ->setExternalUrl($external_url)
    ->setCreatedOn($createdOn)
    ->setActive(true)
    ->setReady(false)
    ->setDoneRequests(0)
    ->setHash($hash)
    ;

    $this->entityManager->persist($link);
    $this->entityManager->flush();

    return $link;
  }

  public function updateLink($params){
    $link = $this->entityManager->getRepository(Link::class)->findOneBy([
      'id'=>$params['id']
    ]);
    $link->setPath($params['path'])
    ->setSizePx($params['size_px'])
    ->setSizeBytes($params['size_bytes']);
    $this->entityManager->flush();
  }

  private function _generateHash()
  {
    $src_string = implode('', func_get_args());
    return md5($src_string);
  }

  // private function _savePreset($resource, $presetId, $createdOn = NULL){
  //   $extension = $resource->getExtension();
  //   foreach($this->container->getParameter('presets') as $p){
  //     if($p['id'] == $presetId){
  //       $preset = $p;
  //     }
  //   }
  //   $imageProcessor = new Imagine();
  //   $size = new Box($preset['width'],$preset['height']);
  //   $mode = ImageInterface::THUMBNAIL_OUTBOUND;
  //   $processorDirectory = $this->container->getParameter('upload_directory').'/imgproc/';
  //   if(!$this->fileSystem->exists($processorDirectory)){$this->fileSystem->mkDir($processorDirectory);}
  //   $targetPath = $processorDirectory.$resource->getId().'_'.$preset['name'].'.'.'jpeg';
  //   $imageProcessor->open($this->container->getParameter('upload_directory').$resource->getPath())
  //   ->thumbnail($size, $mode)
  //   ->save($targetPath);
  //   $imageProcessor = null;
  //   $filename = $this->resourceService->getUniqueIdentifier(file_get_contents($targetPath), $resource->getItem()->getId(),filesize($targetPath)).'.'.$extension;
  //
  //   $resourceParameters = [
  //     'item_id' => $resource->getItem()->getId(),
  //     'extension' => $extension,
  //     'path' => $targetPath,
  //     'username' => $resource->getUsername(),
  //     'filesize' => filesize($targetPath),
  //     'preset' => $preset['id'],
  //     'chunkPath' => $resource->getChunkPath(),
  //     'filename' => $filename,
  //     'src_filename' => $resource->getSrcFilename(),
  //     'gid' => $resource->getId(),
  //     'autogenerated'=>true,
  //     'type'=>4,
  //     'created_on'=>$createdOn
  //   ];
  //
  //   $this->resourceService->processCompletedUpload($resourceParameters);
  //   $this->fileSystem->remove($targetPath);
  // }

}
