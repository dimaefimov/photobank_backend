<?php

namespace App\Service;
use Symfony\Component\Translation\TranslatorInterface;
use Doctrine\ORM\EntityManagerInterface;
use App\PhotoBank\FileUploaderBundle\Event\FileUploadedEvent;
use App\Entity\Resource;
use App\Entity\CatalogueNodeItem;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use App\Service\ResourceService;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\DependencyInjection\ContainerInterface;

use Symfony\Component\Messenger\MessageBusInterface;
use App\Message\ResourcePresetNotification;
class ResourceService{

  private $entityManager;
  private $recordManager;
  private $container;
  private $messageBus;

  public function __construct(
      EntityManagerInterface $entityManager,
      TranslatorInterface $translator,
      Filesystem $fileSystem,
      ContainerInterface $container,
      MessageBusInterface $messageBus)
  {
    $this->entityManager = $entityManager;
    $this->translator = $translator;
    $this->fileSystem = $fileSystem;
    $this->container = $container;
    $this->messageBus = $messageBus;
  }

  public function generatePath($item_code){
    $splitId = array();
    for($i=0; $i<=strlen($item_code)/2; $i++){
      $splitId[] = substr($item_code, $i*2, 2);
    }
    $splitIdPath = implode('/',$splitId)."/";

    return $splitIdPath;
  }

  public function processCompletedUpload($resourceParameters){
    $filepath = $resourceParameters['path'];
    $item_code = $resourceParameters['item_id'];
    $destinationPath = '/'.$this->generatePath($item_code).$resourceParameters['filename'];
    $destinationDir = $this->container->getParameter('fileuploader.uploaddirectory').'/'.$this->generatePath($item_code).$resourceParameters['filename'];
    $this->fileSystem->copy($filepath, $destinationDir);
    $resourceParameters['path'] = $destinationPath;
    $resourceEntity = $this->persistResource($resourceParameters);
    if($resourceEntity->getType() != NULL){
      $this->dispatchPresetMessages($resourceEntity->getId(), $resourceEntity->getType());
    }
  }

  public function persistResource($resourceParameters){
    $resource = new Resource();
    $repository = $this->entityManager->getRepository(CatalogueNodeItem::class);
    $item_id = $resourceParameters['item_id'];
    $item = $repository->findOneBy( ['id' => $item_id] );
    if (!$item) {
        $error_string = $this->translator->trans("Product not founded",[],'file_uploader') . '. '. $this->translator->trans("The code is:",[],'file_uploader') . ' ' . $item_code ;
        throw new NotFoundHttpException($error_string);
    }

    if(in_array(strtolower($resourceParameters['extension']),array('jpg','jpeg','png','gif','psd','tiff','tif','bmp'))){
      $filesizepx = getimagesize($this->container->getParameter("upload_directory").$resourceParameters['path']);
      $resource->setSizePx($filesizepx[0].'/'.$filesizepx[1]);
    }

    $resource->setPath($resourceParameters['path']);
    $resource->setUsername($resourceParameters['username']);
    $resource->setItem($item);
    $resource->setExtension($resourceParameters['extension']);
    $resource->setSizeBytes($resourceParameters['filesize']);
    $resource->setPreset($resourceParameters['preset']);
    $resource->setChunkPath($resourceParameters['chunkPath']);
    $resource->setFilename($resourceParameters['filename']);
    $resource->setSrcFilename($resourceParameters['src_filename']);
    if(!array_key_exists('created_on', $resourceParameters) || $resourceParameters['created_on'] == NULL){
      $resource->setCreatedOn(date('d-m-Y H:i:s'));
    } else { $resource->setCreatedOn($resourceParameters['created_on']); }
    $resource->setAutogenerated($resourceParameters['autogenerated']);
    if(!array_key_exists('type', $resourceParameters) || $resourceParameters['type'] != NULL){
      $resource->setType($resourceParameters['type']);
    }
    if(!array_key_exists('gid', $resourceParameters) || $resourceParameters['gid'] != NULL){
      $resource->setGid($resourceParameters['gid']);
    }

    $this->entityManager->persist($resource);
    $this->entityManager->flush($resource);

    return $resource;
  }

  public function getUniqueIdentifier($file, $itemId, $filesize){
    $fileHash = crc32($file);
    $identifier = md5($fileHash.$itemId.$filesize);
    return $identifier;
  }

  public function dispatchPresetMessages($resource, $type){
    $presetCollections = $this->container->getParameter('preset_collections');
    $presetCollection = array();
    foreach($presetCollections as $collection){
      if($collection['id'] == $type){
        $presetCollection = $collection['presets'];
      }
    }
    foreach($presetCollection as $preset){
      $presetData = [
        'resourceId'=>$resource,
        'presetId'=>$preset,
        'createdOn'=>date('d-m-Y H:i:s')
      ];
      $this->messageBus->dispatch(new ResourcePresetNotification($presetData));
    }
  }

  public function getResourceInfo($id){
    $returnParams = [
      'path'=>'',
      'size_px'=>'',
      'size_bytes'=>'',
    ];
    $resource = $this->entityManager->getRepository(Resource::class)->findOneBy([
      'id'=>$id
    ]);
    $returnParams['path'] = $resource->getPath();
    $returnParams['size_px'] = $resource->getSizePx();
    $returnParams['size_bytes'] = $resource->getSizeBytes();
    return $returnParams;
  }

  // private function _getItemCode($itemId){
  //   $itemRepository = $this->entityManager->getRepository(CatalogueNodeItem::class);
  //   $item = $itemRepository->findOneBy(['id'=>$itemId]);
  //   return $item->getItemCode();
  // }


}
