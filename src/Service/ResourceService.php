<?php

namespace App\Service;
use Symfony\Component\Translation\TranslatorInterface;
use Doctrine\ORM\EntityManagerInterface;
use App\PhotoBank\FileUploaderBundle\Event\FileUploadedEvent;
use App\Entity\Resource;
use App\Entity\CatalogueNodeItem;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use App\Service\ResourceService;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\DependencyInjection\ContainerInterface;
class ResourceService{

  private $entityManager;
  private $recordManager;
  private $container;

  public function __construct(
      EntityManagerInterface $entityManager,
      TranslatorInterface $translator,
      Filesystem $fileSystem,
      ContainerInterface $container)
  {
    $this->entityManager = $entityManager;
    $this->translator = $translator;
    $this->fileSystem = $fileSystem;
    $this->container = $container;
  }

  public function generatePath($item_code){
    $splitId = array();
    for($i=0; $i<=strlen($item_code)/2; $i++){
      $splitId[] = substr($item_code, $i*2, 2);
    }
    $splitIdPath = implode('/',$splitId)."/";

    return $splitIdPath;
  }

  public function processCompletedUpload($resourceParameters){
    $filepath = $resourceParameters['path'];
    $item_code = $this->_getItemCode($resourceParameters['item_id']);
    $destinationDir = $this->container->getParameter('fileuploader.uploaddirectory').'/'.$this->generatePath($item_code).$resourceParameters['filename'];
    var_dump($this->container->getParameter('fileuploader.uploaddirectory'));
    $this->fileSystem->copy($filepath, $destinationDir);
    $resourceParameters['path'] = $destinationDir;
    $this->persistResource($resourceParameters);
  }

  public function persistResource($resourceParameters){
    $resource = new Resource();
    $repository = $this->entityManager->getRepository(CatalogueNodeItem::class);
    $item_id = $resourceParameters['item_id'];
    $item = $repository->findOneBy( ['id' => $item_id] );
    if (!$item) {
        $error_string = $this->translator->trans("Product not founded",[],'file_uploader') . '. '. $this->translator->trans("The code is:",[],'file_uploader') . ' ' . $item_code ;
        throw new NotFoundHttpException($error_string);
    }

    if(in_array($resourceParameters['extension'],array('jpg','jpeg','png'))){
      $filesizepx = getimagesize($resourceParameters['path']);
      $resource->setSizePx($filesizepx[0].'/'.$filesizepx[1]);
    }

    $resource->setPath($resourceParameters['path']);
    $resource->setUsername($resourceParameters['username']);
    $resource->setItem($item);
    $resource->setExtension($resourceParameters['extension']);
    $resource->setSizeBytes($resourceParameters['filesize']);
    $resource->setPreset($resourceParameters['preset']);
    $resource->setChunkPath($resourceParameters['chunkPath']);
    $resource->setFilename($resourceParameters['filename']);
    $resource->setSrcFilename($resourceParameters['src_filename']);
    if($resourceParameters['created_on'] == NULL){
      $resource->setCreatedOn(date('d-m-Y H:i:s'));
    } else { $resource->setCreatedOn($resourceParameters['created_on']); }
    $resource->setAutogenerated($resourceParameters['autogenerated']);
    if($resourceParameters['type'] != NULL){
      $resource->setType($resourceParameters['type']);
    }
    if($resourceParameters['gid'] != NULL){
      $resource->setGid($resourceParameters['gid']);
    }

    $this->entityManager->persist($resource);
    $this->entityManager->flush($resource);
  }

  public function getUniqueIdentifier($file, $itemId, $filesize){
    $fileHash = crc32($file);
    $identifier = md5($fileHash.$itemId.$filesize);
    return $identifier;
  }

  private function _getItemCode($itemId){
    $itemRepository = $this->entityManager->getRepository(CatalogueNodeItem::class);
    $item = $itemRepository->findOneBy(['id'=>$itemId]);
    return $item->getItemCode();
  }
}
